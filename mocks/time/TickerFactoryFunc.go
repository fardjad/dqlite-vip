// Code generated by mockery v2.50.1. DO NOT EDIT.

package time

import (
	dqlite_viptime "fardjad.com/dqlite-vip/time"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TickerFactoryFunc is an autogenerated mock type for the TickerFactoryFunc type
type TickerFactoryFunc struct {
	mock.Mock
}

type TickerFactoryFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *TickerFactoryFunc) EXPECT() *TickerFactoryFunc_Expecter {
	return &TickerFactoryFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: d
func (_m *TickerFactoryFunc) Execute(d time.Duration) dqlite_viptime.Ticker {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 dqlite_viptime.Ticker
	if rf, ok := ret.Get(0).(func(time.Duration) dqlite_viptime.Ticker); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dqlite_viptime.Ticker)
		}
	}

	return r0
}

// TickerFactoryFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type TickerFactoryFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - d time.Duration
func (_e *TickerFactoryFunc_Expecter) Execute(d interface{}) *TickerFactoryFunc_Execute_Call {
	return &TickerFactoryFunc_Execute_Call{Call: _e.mock.On("Execute", d)}
}

func (_c *TickerFactoryFunc_Execute_Call) Run(run func(d time.Duration)) *TickerFactoryFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *TickerFactoryFunc_Execute_Call) Return(_a0 dqlite_viptime.Ticker) *TickerFactoryFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TickerFactoryFunc_Execute_Call) RunAndReturn(run func(time.Duration) dqlite_viptime.Ticker) *TickerFactoryFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewTickerFactoryFunc creates a new instance of TickerFactoryFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTickerFactoryFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *TickerFactoryFunc {
	mock := &TickerFactoryFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

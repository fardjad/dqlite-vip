// Code generated by mockery v2.50.4. DO NOT EDIT.

package vip

import (
	vip "fardjad.com/dqlite-vip/vip"
	mock "github.com/stretchr/testify/mock"
)

// ConfiguratorFactoryFunc is an autogenerated mock type for the ConfiguratorFactoryFunc type
type ConfiguratorFactoryFunc struct {
	mock.Mock
}

type ConfiguratorFactoryFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *ConfiguratorFactoryFunc) EXPECT() *ConfiguratorFactoryFunc_Expecter {
	return &ConfiguratorFactoryFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: gratuitousArpCount
func (_m *ConfiguratorFactoryFunc) Execute(gratuitousArpCount int) vip.Configurator {
	ret := _m.Called(gratuitousArpCount)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 vip.Configurator
	if rf, ok := ret.Get(0).(func(int) vip.Configurator); ok {
		r0 = rf(gratuitousArpCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vip.Configurator)
		}
	}

	return r0
}

// ConfiguratorFactoryFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ConfiguratorFactoryFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - gratuitousArpCount int
func (_e *ConfiguratorFactoryFunc_Expecter) Execute(gratuitousArpCount interface{}) *ConfiguratorFactoryFunc_Execute_Call {
	return &ConfiguratorFactoryFunc_Execute_Call{Call: _e.mock.On("Execute", gratuitousArpCount)}
}

func (_c *ConfiguratorFactoryFunc_Execute_Call) Run(run func(gratuitousArpCount int)) *ConfiguratorFactoryFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ConfiguratorFactoryFunc_Execute_Call) Return(_a0 vip.Configurator) *ConfiguratorFactoryFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConfiguratorFactoryFunc_Execute_Call) RunAndReturn(run func(int) vip.Configurator) *ConfiguratorFactoryFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfiguratorFactoryFunc creates a new instance of ConfiguratorFactoryFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfiguratorFactoryFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfiguratorFactoryFunc {
	mock := &ConfiguratorFactoryFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

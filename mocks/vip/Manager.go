// Code generated by mockery v2.50.1. DO NOT EDIT.

package vip

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

type Manager_Expecter struct {
	mock *mock.Mock
}

func (_m *Manager) EXPECT() *Manager_Expecter {
	return &Manager_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with given fields: ctx
func (_m *Manager) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Manager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Manager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Manager_Expecter) Start(ctx interface{}) *Manager_Start_Call {
	return &Manager_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *Manager_Start_Call) Run(run func(ctx context.Context)) *Manager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Manager_Start_Call) Return(_a0 error) *Manager_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Manager_Start_Call) RunAndReturn(run func(context.Context) error) *Manager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *Manager) Stop() {
	_m.Called()
}

// Manager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Manager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Manager_Expecter) Stop() *Manager_Stop_Call {
	return &Manager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Manager_Stop_Call) Run(run func()) *Manager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Manager_Stop_Call) Return() *Manager_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *Manager_Stop_Call) RunAndReturn(run func()) *Manager_Stop_Call {
	_c.Run(run)
	return _c
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

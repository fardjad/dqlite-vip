// Code generated by mockery v2.50.1. DO NOT EDIT.

package cluster_kv

import (
	cluster_events "fardjad.com/dqlite-vip/cluster/cluster_events"

	mock "github.com/stretchr/testify/mock"
)

// Watcher is an autogenerated mock type for the Watcher type
type Watcher struct {
	mock.Mock
}

type Watcher_Expecter struct {
	mock *mock.Mock
}

func (_m *Watcher) EXPECT() *Watcher_Expecter {
	return &Watcher_Expecter{mock: &_m.Mock}
}

// Watch provides a mock function with given fields: key
func (_m *Watcher) Watch(key string) (chan cluster_events.Change, cluster_events.CancelFunc, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 chan cluster_events.Change
	var r1 cluster_events.CancelFunc
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (chan cluster_events.Change, cluster_events.CancelFunc, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) chan cluster_events.Change); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan cluster_events.Change)
		}
	}

	if rf, ok := ret.Get(1).(func(string) cluster_events.CancelFunc); ok {
		r1 = rf(key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(cluster_events.CancelFunc)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Watcher_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type Watcher_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - key string
func (_e *Watcher_Expecter) Watch(key interface{}) *Watcher_Watch_Call {
	return &Watcher_Watch_Call{Call: _e.mock.On("Watch", key)}
}

func (_c *Watcher_Watch_Call) Run(run func(key string)) *Watcher_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Watcher_Watch_Call) Return(_a0 chan cluster_events.Change, _a1 cluster_events.CancelFunc, _a2 error) *Watcher_Watch_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Watcher_Watch_Call) RunAndReturn(run func(string) (chan cluster_events.Change, cluster_events.CancelFunc, error)) *Watcher_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewWatcher creates a new instance of Watcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Watcher {
	mock := &Watcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

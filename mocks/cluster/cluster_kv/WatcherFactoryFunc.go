// Code generated by mockery v2.50.1. DO NOT EDIT.

package cluster_kv

import (
	cluster "fardjad.com/dqlite-vip/cluster"
	cluster_kv "fardjad.com/dqlite-vip/cluster/cluster_kv"

	mock "github.com/stretchr/testify/mock"

	time "fardjad.com/dqlite-vip/time"
)

// WatcherFactoryFunc is an autogenerated mock type for the WatcherFactoryFunc type
type WatcherFactoryFunc struct {
	mock.Mock
}

type WatcherFactoryFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *WatcherFactoryFunc) EXPECT() *WatcherFactoryFunc_Expecter {
	return &WatcherFactoryFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: clusterNode, ticker
func (_m *WatcherFactoryFunc) Execute(clusterNode cluster.ClusterNode, ticker time.Ticker) cluster_kv.Watcher {
	ret := _m.Called(clusterNode, ticker)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 cluster_kv.Watcher
	if rf, ok := ret.Get(0).(func(cluster.ClusterNode, time.Ticker) cluster_kv.Watcher); ok {
		r0 = rf(clusterNode, ticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cluster_kv.Watcher)
		}
	}

	return r0
}

// WatcherFactoryFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type WatcherFactoryFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - clusterNode cluster.ClusterNode
//   - ticker time.Ticker
func (_e *WatcherFactoryFunc_Expecter) Execute(clusterNode interface{}, ticker interface{}) *WatcherFactoryFunc_Execute_Call {
	return &WatcherFactoryFunc_Execute_Call{Call: _e.mock.On("Execute", clusterNode, ticker)}
}

func (_c *WatcherFactoryFunc_Execute_Call) Run(run func(clusterNode cluster.ClusterNode, ticker time.Ticker)) *WatcherFactoryFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cluster.ClusterNode), args[1].(time.Ticker))
	})
	return _c
}

func (_c *WatcherFactoryFunc_Execute_Call) Return(_a0 cluster_kv.Watcher) *WatcherFactoryFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WatcherFactoryFunc_Execute_Call) RunAndReturn(run func(cluster.ClusterNode, time.Ticker) cluster_kv.Watcher) *WatcherFactoryFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewWatcherFactoryFunc creates a new instance of WatcherFactoryFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWatcherFactoryFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *WatcherFactoryFunc {
	mock := &WatcherFactoryFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

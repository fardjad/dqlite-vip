// Code generated by mockery v2.50.1. DO NOT EDIT.

package cluster_events

import mock "github.com/stretchr/testify/mock"

// CancelFunc is an autogenerated mock type for the CancelFunc type
type CancelFunc struct {
	mock.Mock
}

type CancelFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *CancelFunc) EXPECT() *CancelFunc_Expecter {
	return &CancelFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with no fields
func (_m *CancelFunc) Execute() {
	_m.Called()
}

// CancelFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type CancelFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *CancelFunc_Expecter) Execute() *CancelFunc_Execute_Call {
	return &CancelFunc_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *CancelFunc_Execute_Call) Run(run func()) *CancelFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CancelFunc_Execute_Call) Return() *CancelFunc_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *CancelFunc_Execute_Call) RunAndReturn(run func()) *CancelFunc_Execute_Call {
	_c.Run(run)
	return _c
}

// NewCancelFunc creates a new instance of CancelFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCancelFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *CancelFunc {
	mock := &CancelFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

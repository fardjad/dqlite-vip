// Code generated by mockery v2.50.1. DO NOT EDIT.

package cluster

import (
	context "context"

	cluster "fardjad.com/dqlite-vip/cluster"

	mock "github.com/stretchr/testify/mock"
)

// ClusterNode is an autogenerated mock type for the ClusterNode type
type ClusterNode struct {
	mock.Mock
}

type ClusterNode_Expecter struct {
	mock *mock.Mock
}

func (_m *ClusterNode) EXPECT() *ClusterNode_Expecter {
	return &ClusterNode_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *ClusterNode) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClusterNode_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type ClusterNode_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ClusterNode_Expecter) Close(ctx interface{}) *ClusterNode_Close_Call {
	return &ClusterNode_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *ClusterNode_Close_Call) Run(run func(ctx context.Context)) *ClusterNode_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClusterNode_Close_Call) Return(_a0 error) *ClusterNode_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClusterNode_Close_Call) RunAndReturn(run func(context.Context) error) *ClusterNode_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterMembers provides a mock function with given fields: ctx
func (_m *ClusterNode) ClusterMembers(ctx context.Context) ([]*cluster.ClusterMemberInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterMembers")
	}

	var r0 []*cluster.ClusterMemberInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*cluster.ClusterMemberInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*cluster.ClusterMemberInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*cluster.ClusterMemberInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterNode_ClusterMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterMembers'
type ClusterNode_ClusterMembers_Call struct {
	*mock.Call
}

// ClusterMembers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ClusterNode_Expecter) ClusterMembers(ctx interface{}) *ClusterNode_ClusterMembers_Call {
	return &ClusterNode_ClusterMembers_Call{Call: _e.mock.On("ClusterMembers", ctx)}
}

func (_c *ClusterNode_ClusterMembers_Call) Run(run func(ctx context.Context)) *ClusterNode_ClusterMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClusterNode_ClusterMembers_Call) Return(_a0 []*cluster.ClusterMemberInfo, _a1 error) *ClusterNode_ClusterMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClusterNode_ClusterMembers_Call) RunAndReturn(run func(context.Context) ([]*cluster.ClusterMemberInfo, error)) *ClusterNode_ClusterMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetString provides a mock function with given fields: key
func (_m *ClusterNode) GetString(key string) (string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterNode_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type ClusterNode_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//   - key string
func (_e *ClusterNode_Expecter) GetString(key interface{}) *ClusterNode_GetString_Call {
	return &ClusterNode_GetString_Call{Call: _e.mock.On("GetString", key)}
}

func (_c *ClusterNode_GetString_Call) Run(run func(key string)) *ClusterNode_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClusterNode_GetString_Call) Return(_a0 string, _a1 error) *ClusterNode_GetString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClusterNode_GetString_Call) RunAndReturn(run func(string) (string, error)) *ClusterNode_GetString_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *ClusterNode) ID() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// ClusterNode_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type ClusterNode_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *ClusterNode_Expecter) ID() *ClusterNode_ID_Call {
	return &ClusterNode_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *ClusterNode_ID_Call) Run(run func()) *ClusterNode_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClusterNode_ID_Call) Return(_a0 uint64) *ClusterNode_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClusterNode_ID_Call) RunAndReturn(run func() uint64) *ClusterNode_ID_Call {
	_c.Call.Return(run)
	return _c
}

// IsLeader provides a mock function with given fields: ctx
func (_m *ClusterNode) IsLeader(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsLeader")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ClusterNode_IsLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLeader'
type ClusterNode_IsLeader_Call struct {
	*mock.Call
}

// IsLeader is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ClusterNode_Expecter) IsLeader(ctx interface{}) *ClusterNode_IsLeader_Call {
	return &ClusterNode_IsLeader_Call{Call: _e.mock.On("IsLeader", ctx)}
}

func (_c *ClusterNode_IsLeader_Call) Run(run func(ctx context.Context)) *ClusterNode_IsLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClusterNode_IsLeader_Call) Return(_a0 bool) *ClusterNode_IsLeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClusterNode_IsLeader_Call) RunAndReturn(run func(context.Context) bool) *ClusterNode_IsLeader_Call {
	_c.Call.Return(run)
	return _c
}

// LeaderID provides a mock function with given fields: ctx
func (_m *ClusterNode) LeaderID(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LeaderID")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterNode_LeaderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LeaderID'
type ClusterNode_LeaderID_Call struct {
	*mock.Call
}

// LeaderID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ClusterNode_Expecter) LeaderID(ctx interface{}) *ClusterNode_LeaderID_Call {
	return &ClusterNode_LeaderID_Call{Call: _e.mock.On("LeaderID", ctx)}
}

func (_c *ClusterNode_LeaderID_Call) Run(run func(ctx context.Context)) *ClusterNode_LeaderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClusterNode_LeaderID_Call) Return(_a0 uint64, _a1 error) *ClusterNode_LeaderID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClusterNode_LeaderID_Call) RunAndReturn(run func(context.Context) (uint64, error)) *ClusterNode_LeaderID_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with given fields: ctx
func (_m *ClusterNode) Ready(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClusterNode_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type ClusterNode_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ClusterNode_Expecter) Ready(ctx interface{}) *ClusterNode_Ready_Call {
	return &ClusterNode_Ready_Call{Call: _e.mock.On("Ready", ctx)}
}

func (_c *ClusterNode_Ready_Call) Run(run func(ctx context.Context)) *ClusterNode_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClusterNode_Ready_Call) Return(_a0 error) *ClusterNode_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClusterNode_Ready_Call) RunAndReturn(run func(context.Context) error) *ClusterNode_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// SetString provides a mock function with given fields: key, value
func (_m *ClusterNode) SetString(key string, value string) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetString")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClusterNode_SetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetString'
type ClusterNode_SetString_Call struct {
	*mock.Call
}

// SetString is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *ClusterNode_Expecter) SetString(key interface{}, value interface{}) *ClusterNode_SetString_Call {
	return &ClusterNode_SetString_Call{Call: _e.mock.On("SetString", key, value)}
}

func (_c *ClusterNode_SetString_Call) Run(run func(key string, value string)) *ClusterNode_SetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ClusterNode_SetString_Call) Return(_a0 error) *ClusterNode_SetString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClusterNode_SetString_Call) RunAndReturn(run func(string, string) error) *ClusterNode_SetString_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *ClusterNode) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClusterNode_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type ClusterNode_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ClusterNode_Expecter) Start(ctx interface{}) *ClusterNode_Start_Call {
	return &ClusterNode_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *ClusterNode_Start_Call) Run(run func(ctx context.Context)) *ClusterNode_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ClusterNode_Start_Call) Return(_a0 error) *ClusterNode_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClusterNode_Start_Call) RunAndReturn(run func(context.Context) error) *ClusterNode_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewClusterNode creates a new instance of ClusterNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClusterNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClusterNode {
	mock := &ClusterNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

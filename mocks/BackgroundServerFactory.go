// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	api "fardjad.com/dqlite-vip/api"

	mock "github.com/stretchr/testify/mock"
)

// BackgroundServerFactory is an autogenerated mock type for the BackgroundServerFactory type
type BackgroundServerFactory struct {
	mock.Mock
}

type BackgroundServerFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *BackgroundServerFactory) EXPECT() *BackgroundServerFactory_Expecter {
	return &BackgroundServerFactory_Expecter{mock: &_m.Mock}
}

// NewServer provides a mock function with given fields: addr, handler
func (_m *BackgroundServerFactory) NewServer(addr string, handler http.Handler) api.BackgroundServer {
	ret := _m.Called(addr, handler)

	if len(ret) == 0 {
		panic("no return value specified for NewServer")
	}

	var r0 api.BackgroundServer
	if rf, ok := ret.Get(0).(func(string, http.Handler) api.BackgroundServer); ok {
		r0 = rf(addr, handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.BackgroundServer)
		}
	}

	return r0
}

// BackgroundServerFactory_NewServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewServer'
type BackgroundServerFactory_NewServer_Call struct {
	*mock.Call
}

// NewServer is a helper method to define mock.On call
//   - addr string
//   - handler http.Handler
func (_e *BackgroundServerFactory_Expecter) NewServer(addr interface{}, handler interface{}) *BackgroundServerFactory_NewServer_Call {
	return &BackgroundServerFactory_NewServer_Call{Call: _e.mock.On("NewServer", addr, handler)}
}

func (_c *BackgroundServerFactory_NewServer_Call) Run(run func(addr string, handler http.Handler)) *BackgroundServerFactory_NewServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(http.Handler))
	})
	return _c
}

func (_c *BackgroundServerFactory_NewServer_Call) Return(_a0 api.BackgroundServer) *BackgroundServerFactory_NewServer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BackgroundServerFactory_NewServer_Call) RunAndReturn(run func(string, http.Handler) api.BackgroundServer) *BackgroundServerFactory_NewServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewBackgroundServerFactory creates a new instance of BackgroundServerFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackgroundServerFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *BackgroundServerFactory {
	mock := &BackgroundServerFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

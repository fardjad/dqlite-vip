// Code generated by mockery v2.50.4. DO NOT EDIT.

package cmd

import mock "github.com/stretchr/testify/mock"

// Waiter is an autogenerated mock type for the Waiter type
type Waiter struct {
	mock.Mock
}

type Waiter_Expecter struct {
	mock *mock.Mock
}

func (_m *Waiter) EXPECT() *Waiter_Expecter {
	return &Waiter_Expecter{mock: &_m.Mock}
}

// Wait provides a mock function with no fields
func (_m *Waiter) Wait() {
	_m.Called()
}

// Waiter_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type Waiter_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *Waiter_Expecter) Wait() *Waiter_Wait_Call {
	return &Waiter_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *Waiter_Wait_Call) Run(run func()) *Waiter_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Waiter_Wait_Call) Return() *Waiter_Wait_Call {
	_c.Call.Return()
	return _c
}

func (_c *Waiter_Wait_Call) RunAndReturn(run func()) *Waiter_Wait_Call {
	_c.Run(run)
	return _c
}

// NewWaiter creates a new instance of Waiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWaiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Waiter {
	mock := &Waiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

name: test-and-release

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
 
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            automake \
            libtool \
            gettext \
            autopoint \
            tclsh \
            tcl \
            libsqlite3-dev \
            pkg-config \
            git
      - name: Install just
        uses: extractions/setup-just@v2
      - uses: actions/cache@main
        id: build-cache
        with:
          path: |
            ./hack/.build
            ./hack/.deps
          key: ${{ runner.os }}-build-${{ hashFiles('./hack/env.sh') }}
          restore-keys: |
            ${{ runner.os }}-build-
      - name: Setup Go
        uses: actions/setup-go@main
        with:
          go-version: stable
          check-latest: true
      - name: Run tests
        run: just test
  check-version:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version_changed: ${{ steps.check_version.outputs.version_changed }}
      version: ${{ steps.check_version.outputs.version }}
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
          filter: blob:none
      - name: Check version
        id: check_version
        run: |
          FILE_VERSION=$(cat VERSION.txt)
          FILE_VERSION="${FILE_VERSION#v}"

          TAG_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          TAG_VERSION="${TAG_VERSION#v}"

          if [ "$(printf '%s\n' "$TAG_VERSION" "$FILE_VERSION" | sort -V | tail -n1)" = "$FILE_VERSION" ] && [ "$FILE_VERSION" != "$TAG_VERSION" ]; then
            echo "VERSION in file is greater than the latest tag."
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "VERSION is not greater than the latest tag."
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

          echo "version=$FILE_VERSION" >> $GITHUB_OUTPUT
  create-tag:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
          filter: blob:none
      - name: Configure Git
        uses: fardjad/my-actions/configure-git@main
      - name: Create Git tag
        run: |
          TAG="v${{ needs.check-version.outputs.version }}"

          if git rev-parse $TAG >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping..."
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            git tag -a $TAG -m "Release $TAG"
            git push origin $TAG
          fi
  build-binaries:
    strategy:
      matrix:
        runner: 
          - ubuntu-latest
          - ubicloud-standard-2-arm
      fail-fast: true
    runs-on: ${{ matrix.runner }}
    needs: 
      - create-tag
      - check-version
    if: needs.check-version.outputs.version_changed == 'true'
    steps:
      - uses: actions/checkout@main
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            automake \
            libtool \
            gettext \
            autopoint \
            tclsh \
            tcl \
            libsqlite3-dev \
            pkg-config \
            git
      - name: Install just
        uses: extractions/setup-just@v2
      - uses: actions/cache@main
        id: build-cache
        with:
          path: |
            ./hack/.build
            ./hack/.deps
          key: ${{ runner.os }}-build-${{ hashFiles('./hack/env.sh') }}
          restore-keys: |
            ${{ runner.os }}-build-
      - name: Setup Go
        uses: actions/setup-go@main
        with:
          go-version: stable
          check-latest: true
      - name: Build
        run: |
          just build-static
          BIN_NAME="dqlite-vip-${{ needs.check-version.outputs.version }}-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m)"
          mv ./bin/static/dqlite-vip ./bin/static/$BIN_NAME
      - name: Upload Binary
        uses: actions/upload-artifact@main
        with:
          name: artifacts-${{ matrix.runner }}
          path: ./bin/static/
  release:
    needs:
      - build-binaries
      - check-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Download all artifacts
        uses: actions/download-artifact@main
        with:
          path: artifacts
          pattern: artifacts-*
          merge-multiple: true
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          TAG: "v${{ needs.check-version.outputs.version }}"
        run: gh release create "${TAG}" --generate-notes ./artifacts/*
  docker-build-and-push:
    needs:
      - build-binaries
      - check-version
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    env:
      REGISTRY: index.docker.io
      IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/dqlite-vip
      TAG: ${{ needs.check-version.outputs.version }}
    steps:
      - name: Set up Docker
        uses: docker/setup-docker-action@master
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
      - name: Login to Docker Hub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: actions/checkout@main
      - name: Download all artifacts
        uses: actions/download-artifact@main
        with:
          path: artifacts
          pattern: artifacts-*
          merge-multiple: true
      - name: Build and push image
        id: push
        uses: docker/build-push-action@master
        with:
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max
          context: .
          file: .github/Dockerfile
          push: true
          tags: "${{ env.IMAGE }}:${{ env.TAG }},${{ env.IMAGE }}:latest"
      - name: Attest
        uses: actions/attest-build-provenance@main
        id: attest
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
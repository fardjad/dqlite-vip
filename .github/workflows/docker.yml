name: docker

on:
  workflow_dispatch: {}

jobs:
  read-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
          filter: blob:none
      - name: Read version from file and compare with tag
        id: get_version
        run: |
          FILE_VERSION=$(cat VERSION.txt)
          FILE_VERSION="${FILE_VERSION#v}"

          TAG_VERSION=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          TAG_VERSION="${TAG_VERSION#v}"
          
          if [ "$FILE_VERSION" != "$TAG_VERSION" ]; then
            echo "The latest tag ($TAG_VERSION) does not match the version in the VERSION file ($FILE_VERSION)"
            exit 0
          fi

          echo "version=$FILE_VERSION" >> $GITHUB_OUTPUT
      - uses: actions/checkout@main
  build-and-push:
    runs-on: ubuntu-latest
    needs: read-version
    if: needs.read-version.outputs.version != ''
    steps:
      - name: Set up Docker
        uses: docker/setup-docker-action@master
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
      - name: Login to Docker Hub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: actions/checkout@main
      - name: Build and push
        uses: docker/build-push-action@master
        with:
          platforms: linux/amd64
          # This is needed to include the .git directory
          context: .
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max
          tags: "${{ env.IMAGE }}:${{ env.TAG }},${{ env.IMAGE }}:latest"
        env:
          IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/dqlite-vip
          TAG: ${{ needs.read-version.outputs.version }}